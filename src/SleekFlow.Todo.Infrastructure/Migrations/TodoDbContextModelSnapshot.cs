// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SleekFlow.Todo.Infrastructure.Persistence;

#nullable disable

namespace SleekFlow.Todo.Infrastructure.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    partial class TodoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TodoApp")
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SleekFlow.Todo.Domain.Entities.TodoItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR(30)");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("ListId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id")
                        .HasName("PK_TodoItems");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems", "TodoApp");
                });

            modelBuilder.Entity("SleekFlow.Todo.Domain.Entities.TodoList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id")
                        .HasName("PK_TodoLists");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("TodoLists", "TodoApp");
                });

            modelBuilder.Entity("SleekFlow.Todo.Infrastructure.Identities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("Id")
                        .HasName("PK_AppUsers");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UC_AppUsers_UserName");

                    b.ToTable("Users", "TodoApp");
                });

            modelBuilder.Entity("SleekFlow.Todo.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("SleekFlow.Todo.Domain.Entities.TodoList", null)
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TodoItem_TodoList");
                });

            modelBuilder.Entity("SleekFlow.Todo.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
